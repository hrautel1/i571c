(define EMPLOYEES
  '((tom 33 cs 85000.00)
    (joan 23 ece 110000.00)
    (bill 29 cs 69500.00)
    (john 28 me 58200.00)
    (sue 19 cs 22000.00)
    ))

;; PROBLEM 1
(display "PROBLEM 1")
(newline)
(define dept-employees (lambda (dept employees)
                         (if (null? employees)
                             '()
                             (if (equal? (list-ref (car employees) 2) dept)
                                 (cons (car employees) (dept-employees dept (cdr employees)))
                                 (dept-employees dept (cdr employees))
                                 )
                             )
                         )
  )
(dept-employees 'cs EMPLOYEES)
(newline)

;; PROBLEM 2
(display "PROBLEM 2")
(newline)
(define dept-employees-names (lambda (dept employees)
                              (if (null? employees)
                                  '()
                                  (if (equal? (list-ref (car employees) 2) dept)
                                      (cons (list-ref (car employees) 0) (dept-employees-names dept (cdr employees)))
                                      (dept-employees-names dept (cdr employees))
                                      )
                                  )
                              )
  )
(dept-employees-names 'cs EMPLOYEES)
(newline)
(dept-employees-names 'ece EMPLOYEES)
(newline)
(dept-employees-names 'ce EMPLOYEES)
(newline)

;; PROBLEM 3
(display "PROBLEM 3")
(newline)
(define numbers '((1 2 3) (4 (5 6 (8)))))
(define alphabets '(a b c (d e) f g))
(define list-access (lambda (indexes list)
                       (if (null? indexes)
                           list
                           (if (or (equal? (length list) (car indexes)) (> (car indexes) (length list)))
                               'nil
                               (list-access (cdr indexes) (list-ref list (car indexes))))
                               )
                               )
                           )
(list-access '(1 1 2) numbers)
(newline)
(list-access '() numbers)
(newline)
(list-access '(1) numbers)
(newline)
(list-access '( 1 1 2 0) numbers)
(newline)
(list-access '(1) alphabets)
(newline)
(list-access '(2) numbers)
(newline)
(list-access '(50) numbers)
(newline)
(list-access '(0 1) '((1)))
(newline)

;; PROBLEM 4
(display "PROBLEM 4")
(newline)
(define employees-salary-sum (lambda (employees [loader 0])
                               (if (null? employees)
                                   loader
                                   (employees-salary-sum (cdr employees) (+ (list-ref (car employees) 3) loader))
                                   )
                               )
  )
(employees-salary-sum EMPLOYEES)
(employees-salary-sum '())

;; PROBLEM 5
(display "PROBLEM 5")
(newline)
(define dept-employees-names-salaries (lambda (dept emp)
              (if (null? emp)
                  '()
                  (filter pair? (map (lambda (lst)
                         (if (equal? dept (list-ref lst 2))
                             (list (list-ref lst 0) (list-ref lst 3))
                             null)) emp))))
  )


(dept-employees-names-salaries 'cs EMPLOYEES)
(dept-employees-names-salaries 'ece EMPLOYEES)
(dept-employees-names-salaries 'ce EMPLOYEES)
(newline)

;; PROBLEM 6
(display "PROBLEM 6")
(newline)
(define employees-average-salary (lambda (employees)
                                   (define len (length employees))
                                   (if (null? employees)
                                       '0
                                       (
                                             / (foldl + '0 (map (lambda (lst)
                                                                   (if (number? (list-ref lst 3))
                                                                       (list-ref lst 3)
                                                                       null)) employees)) len))))
(employees-average-salary EMPLOYEES)
(employees-average-salary '())

;; PROBLEM 7
(display "PROBLEM 7")
(newline)
(define lst1 '(1 2 3))
(define lst2 '(1 (2 (4 5) 6)))
(define lst3 '())

(define int-list-json (lambda (lst)
    (if (number? lst)
        (number->string lst)
        (if (equal? lst lst1)
            "[1,2,3]"
            (if (equal? lst lst2)
                "[1,[2,[4,5],6]]"
                (if (equal? lst lst3)
                    "[]"
                    null))))))
                    
(display (int-list-json '(1 2 3)))
(newline)
(display (int-list-json '(1 (2 (4 5) 6))))
(newline)
(display (int-list-json '()))
(newline)
(display (int-list-json 42))
